<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Paimon</title>
    <link>//paimon.apache.org/docs/0.4/</link>
    <description>Recent content on Apache Paimon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="//paimon.apache.org/docs/0.4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating Catalogs</title>
      <link>//paimon.apache.org/docs/0.4/how-to/creating-catalogs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/how-to/creating-catalogs/</guid>
      <description>Creating Catalogs #  Paimon catalogs currently support two types of metastores:
 filesystem metastore (default), which stores both metadata and table files in filesystems. hive metastore, which additionally stores metadata in Hive metastore. Users can directly access the tables from Hive.  See CatalogOptions for detailed options when creating a catalog.
Creating a Catalog with Filesystem Metastore #  Flink The following Flink SQL registers and uses a Paimon catalog named my_catalog.</description>
    </item>
    
    <item>
      <title>Java API</title>
      <link>//paimon.apache.org/docs/0.4/api/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/api/java-api/</guid>
      <description>Java API #  Dependency #  Maven dependency:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.paimon&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;paimon-bundle&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.4.0-incubating&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Or download the jar file: Paimon Bundle. Paimon relies on Hadoop environment, you should add hadoop classpath or bundled jar.
Create Catalog #  Before coming into contact with the Table, you need to create a Catalog.
import org.apache.paimon.catalog.Catalog; import org.apache.paimon.catalog.CatalogContext; import org.apache.paimon.catalog.CatalogFactory; import org.apache.paimon.fs.Path; import org.apache.paimon.options.Options; public class CreateCatalog { public static void createFilesystemCatalog() { CatalogContext context = CatalogContext.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>//paimon.apache.org/docs/0.4/concepts/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/concepts/overview/</guid>
      <description>Overview #  Apache Paimon(incubating) is a streaming data lake platform that supports high-speed data ingestion, change data tracking and efficient real-time analytics.
Architecture #  As shown in the architecture above:
Read/Write: Paimon supports a versatile way to read/write data and perform OLAP queries.
 For reads, it supports consuming data  from historical snapshots (in batch mode), from the latest offset (in streaming mode), or reading incremental snapshots in a hybrid way.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>//paimon.apache.org/docs/0.4/engines/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/engines/overview/</guid>
      <description>Overview #  Paimon not only supports Flink SQL writes and queries natively, but also provides queries from other popular engines, such as Apache Spark and Apache Hive.
Compatibility Matrix #     Engine Version Batch Read Batch Write Create Table Streaming Write Streaming Read Batch Overwrite     Flink 1.14 - 1.17 ✅ ✅ ✅ ✅ ✅ ✅   Hive 2.1 - 3.1 ✅ ✅ ❌ ❌ ❌ ❌   Spark 3.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>//paimon.apache.org/docs/0.4/filesystems/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/filesystems/overview/</guid>
      <description>Overview #  Apache Paimon utilizes the same pluggable file systems as Apache Flink. Users can follow the standard plugin mechanism to configure the plugin structure if using Flink as compute engine. However, for other engines like Spark or Hive, the provided opt jars (by Flink) may get conflicts and cannot be used directly. It is not convenient for users to fix class conflicts, thus Paimon provides the self-contained and engine-unified FileSystem pluggable jars for user to query tables from Spark/Hive side.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>//paimon.apache.org/docs/0.4/project/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/project/roadmap/</guid>
      <description>Roadmap #  Paimon&amp;rsquo;s long-term goal is to become the better data lake platform for building the Streaming Lakehouse. Paimon will invest in real-time, ecology, and data warehouse integrity for a long time.
If you have other requirements, please contact us.
What’s Next? #  Core #   Lookup Changelog-Producer to produce changelog in real-time Enhance Flink Lookup Join from True Lookup Provide stable Java Programing API Savepoint support More Metrics, such as the busyness of compaction thread Multi table consistency for real-time materialized views  Ingestion #   Schema Evolution Synchronization from Flink CDC Entire Database Synchronization from Flink CDC Integration with Apache Seatunnel  Compute Engines #   Flink DELETE/UPDATE support More management via Flink/Spark CALL procedures.</description>
    </item>
    
    <item>
      <title>Write Performance</title>
      <link>//paimon.apache.org/docs/0.4/maintenance/write-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/maintenance/write-performance/</guid>
      <description>Write Performance #  Performance of Paimon writers are related with the following factors.
Parallelism #  It is recommended that the parallelism of sink should be less than or equal to the number of buckets, preferably equal. You can control the parallelism of the sink with the sink.parallelism table property.
  Option Required Default Type Description     sink.parallelism No (none) Integer Defines the parallelism of the sink operator.</description>
    </item>
    
    <item>
      <title>Basic Concepts</title>
      <link>//paimon.apache.org/docs/0.4/concepts/basic-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/concepts/basic-concepts/</guid>
      <description>Basic Concepts #  Snapshot #  A snapshot captures the state of a table at some point in time. Users can access the latest data of a table through the latest snapshot. By time traveling, users can also access the previous state of a table through an earlier snapshot.
Partition #  Paimon adopts the same partitioning concept as Apache Hive to separate data.
Partitioning is an optional way of dividing a table into related parts based on the values of particular columns like date, city, and department.</description>
    </item>
    
    <item>
      <title>Creating Tables</title>
      <link>//paimon.apache.org/docs/0.4/how-to/creating-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/how-to/creating-tables/</guid>
      <description>Creating Tables #  Creating Catalog Managed Tables #  Tables created in Paimon catalogs are managed by the catalog. When the table is dropped from catalog, its table files will also be deleted.
The following SQL assumes that you have registered and are using a Paimon catalog. It creates a managed table named MyTable with five columns in the catalog&amp;rsquo;s default database, where dt, hh and user_id are the primary keys.</description>
    </item>
    
    <item>
      <title>Download</title>
      <link>//paimon.apache.org/docs/0.4/project/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/project/download/</guid>
      <description>Download #  This documentation is a guide for downloading Paimon Jars.
Engine Jars #     Version Jar     Flink 1.17 paimon-flink-1.17-0.4.0-incubating.jar   Flink 1.16 paimon-flink-1.16-0.4.0-incubating.jar   Flink 1.15 paimon-flink-1.15-0.4.0-incubating.jar   Flink 1.14 paimon-flink-1.14-0.4.0-incubating.jar   Flink Action paimon-flink-action-0.4.0-incubating.jar   Spark 3.3 paimon-spark-3.3-0.4.0-incubating.jar   Spark 3.2 paimon-spark-3.2-0.4.0-incubating.jar   Spark 3.1 paimon-spark-3.1-0.4.0-incubating.jar   Spark 2 paimon-spark-2-0.4.0-incubating.jar   Hive 3.</description>
    </item>
    
    <item>
      <title>Flink</title>
      <link>//paimon.apache.org/docs/0.4/engines/flink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/engines/flink/</guid>
      <description>Flink #  This documentation is a guide for using Paimon in Flink.
Preparing Paimon Jar File #  Paimon currently supports Flink 1.17, 1.16, 1.15 and 1.14. We recommend the latest Flink version for a better experience.
Download the jar file with corresponding version.
   Version Jar     Flink 1.17 paimon-flink-1.17-0.4.0-incubating.jar   Flink 1.16 paimon-flink-1.16-0.4.0-incubating.jar   Flink 1.15 paimon-flink-1.15-0.4.0-incubating.jar   Flink 1.</description>
    </item>
    
    <item>
      <title>Flink API</title>
      <link>//paimon.apache.org/docs/0.4/api/flink-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/api/flink-api/</guid>
      <description>Flink API #  Dependency #  Maven dependency:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.paimon&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;paimon-flink-1.17&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.4.0-incubating&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.flink&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;flink-table-api-java-bridge_2.12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.17.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; Or download the jar file: Paimon Flink. Please choose your Flink version.
Paimon relies on Hadoop environment, you should add hadoop classpath or bundled jar.
Paimon does not provide a DataStream API, but you can read or write to Paimon tables by the conversion between DataStream and Table in Flink. See DataStream API Integration.</description>
    </item>
    
    <item>
      <title>HDFS</title>
      <link>//paimon.apache.org/docs/0.4/filesystems/hdfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/filesystems/hdfs/</guid>
      <description>HDFS #  You don&amp;rsquo;t need any additional dependencies to access HDFS because you have already taken care of the Hadoop dependencies.
HDFS Configuration #  For HDFS, the most important thing is to be able to read your HDFS configuration.
Flink/Trino/JavaAPI You may not have to do anything, if you are in a hadoop environment. Otherwise pick one of the following ways to configure your HDFS:
 Set environment variable HADOOP_HOME or HADOOP_CONF_DIR.</description>
    </item>
    
    <item>
      <title>Read Performance</title>
      <link>//paimon.apache.org/docs/0.4/maintenance/read-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/maintenance/read-performance/</guid>
      <description>Read Performance #  Full Compaction #  Configure &amp;lsquo;full-compaction.delta-commits&amp;rsquo; perform full-compaction periodically in Flink writing. And it can ensure that partitions are full compacted before writing ends.
It is not recommended to set a value that exceeds the snapshot expiration time (default 1 hour). For example, if your checkpoint interval is 1 minute, it is recommended to set the &amp;lsquo;full-compaction.delta-commits&amp;rsquo; to 30.
Primary Key Table #  For Primary Key Table, it&amp;rsquo;s a &amp;lsquo;MergeOnRead&amp;rsquo; technology.</description>
    </item>
    
    <item>
      <title>Altering Tables</title>
      <link>//paimon.apache.org/docs/0.4/how-to/altering-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/how-to/altering-tables/</guid>
      <description>Altering Tables #  Changing/Adding Table Properties #  The following SQL sets write-buffer-size table property to 256 MB.
Flink ALTER TABLE my_table SET ( &amp;#39;write-buffer-size&amp;#39; = &amp;#39;256 MB&amp;#39; ); Spark3 ALTER TABLE my_table SET TBLPROPERTIES ( &amp;#39;write-buffer-size&amp;#39; = &amp;#39;256 MB&amp;#39; );  Rename Table Name #  The following SQL rename the table name to new name.
Flink ALTER TABLE my_table RENAME TO my_table_new; Spark3 ALTER TABLE my_table RENAME TO my_table_new;  If you use object storage, such as S3 or OSS, please use this syntax carefully, because the renaming of object storage is not atomic, and only partial files may be moved in case of failure.</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>//paimon.apache.org/docs/0.4/project/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/project/contributing/</guid>
      <description>Contributing #  Apache Paimon (incubating) is developed by an open and friendly community. Everybody is cordially welcome to join the community and contribute to Apache Paimon. There are several ways to interact with the community and contribute to Paimon including asking questions, filing bug reports, proposing new features, joining discussions on the mailing lists, contributing code or documentation, improving website, testing release candidates and writing corresponding blog etc.
What do you want to do?</description>
    </item>
    
    <item>
      <title>Expiring Snapshots</title>
      <link>//paimon.apache.org/docs/0.4/maintenance/expiring-snapshots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/maintenance/expiring-snapshots/</guid>
      <description>Expiring Snapshots #  Paimon writers generates one or two snapshots per commit. Each snapshot may add some new data files or mark some old data files as deleted. However, the marked data files are not truly deleted because Paimon also supports time traveling to an earlier snapshot. They are only deleted when the snapshot expires.
Currently, expiration is automatically performed by Paimon writers when committing new changes. By expiring old snapshots, old data files and metadata files that are no longer used can be deleted to release disk space.</description>
    </item>
    
    <item>
      <title>File Layouts</title>
      <link>//paimon.apache.org/docs/0.4/concepts/file-layouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/concepts/file-layouts/</guid>
      <description>File Layouts #  All files of a table are stored under one base directory. Paimon files are organized in a layered style. The following image illustrates the file layout. Starting from a snapshot file, Paimon readers can recursively access all records from the table.
Snapshot Files #  All snapshot files are stored in the snapshot directory.
A snapshot file is a JSON file containing information about this snapshot, including</description>
    </item>
    
    <item>
      <title>OSS</title>
      <link>//paimon.apache.org/docs/0.4/filesystems/oss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/filesystems/oss/</guid>
      <description>OSS #  Download paimon-oss-0.4.0-incubating.jar. Flink If you have already configured oss access through Flink (Via Flink FileSystem), here you can skip the following configuration.  Put paimon-oss-0.4.0-incubating.jar into lib directory of your Flink home, and create catalog:
CREATE CATALOG my_catalog WITH ( &amp;#39;type&amp;#39; = &amp;#39;paimon&amp;#39;, &amp;#39;warehouse&amp;#39; = &amp;#39;oss://path/to/warehouse&amp;#39;, &amp;#39;fs.oss.endpoint&amp;#39; = &amp;#39;oss-cn-hangzhou.aliyuncs.com&amp;#39;, &amp;#39;fs.oss.accessKeyId&amp;#39; = &amp;#39;xxx&amp;#39;, &amp;#39;fs.oss.accessKeySecret&amp;#39; = &amp;#39;yyy&amp;#39; ); Spark If you have already configured oss access through Spark (Via Hadoop FileSystem), here you can skip the following configuration.</description>
    </item>
    
    <item>
      <title>Spark3</title>
      <link>//paimon.apache.org/docs/0.4/engines/spark3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/engines/spark3/</guid>
      <description>Spark3 #  This documentation is a guide for using Paimon in Spark3.
Preparing Paimon Jar File #  Paimon currently supports Spark 3.3, 3.2 and 3.1. We recommend the latest Spark version for a better experience.
Download the jar file with corresponding version.
   Version Jar     Spark 3.3 paimon-spark-3.3-0.4.0-incubating.jar   Spark 3.2 paimon-spark-3.2-0.4.0-incubating.jar   Spark 3.1 paimon-spark-3.1-0.4.0-incubating.jar    You can also manually build bundled jar from the source code.</description>
    </item>
    
    <item>
      <title>File Operations</title>
      <link>//paimon.apache.org/docs/0.4/concepts/file-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/concepts/file-operations/</guid>
      <description>File Operations #  This article is specifically designed to clarify the impact that various file operations have on files.
This page provides concrete examples and practical tips for effectively managing them. Furthermore, through an in-depth exploration of operations such as commit and compact, we aim to offer insights into the creation and updates of files.
Prerequisite #  Before delving further into this page, please ensure that you have read through the following sections:</description>
    </item>
    
    <item>
      <title>Rescale Bucket</title>
      <link>//paimon.apache.org/docs/0.4/maintenance/rescale-bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/maintenance/rescale-bucket/</guid>
      <description>Rescale Bucket #  Since the number of total buckets dramatically influences the performance, Paimon allows users to tune bucket numbers by ALTER TABLE command and reorganize data layout by INSERT OVERWRITE without recreating the table/partition. When executing overwrite jobs, the framework will automatically scan the data with the old bucket number and hash the record according to the current bucket number.
Rescale Overwrite #  -- rescale number of total buckets ALTER TABLE table_identifier SET (&amp;#39;bucket&amp;#39; = &amp;#39;.</description>
    </item>
    
    <item>
      <title>S3</title>
      <link>//paimon.apache.org/docs/0.4/filesystems/s3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/filesystems/s3/</guid>
      <description>S3 #  Download paimon-s3-0.4.0-incubating.jar. Flink If you have already configured s3 access through Flink (Via Flink FileSystem), here you can skip the following configuration.  Put paimon-s3-0.4.0-incubating.jar into lib directory of your Flink home, and create catalog:
CREATE CATALOG my_catalog WITH ( &amp;#39;type&amp;#39; = &amp;#39;paimon&amp;#39;, &amp;#39;warehouse&amp;#39; = &amp;#39;s3://path/to/warehouse&amp;#39;, &amp;#39;s3.endpoint&amp;#39; = &amp;#39;your-endpoint-hostname&amp;#39;, &amp;#39;s3.access-key&amp;#39; = &amp;#39;xxx&amp;#39;, &amp;#39;s3.secret-key&amp;#39; = &amp;#39;yyy&amp;#39; ); Spark If you have already configured s3 access through Spark (Via Hadoop FileSystem), here you can skip the following configuration.</description>
    </item>
    
    <item>
      <title>Spark2</title>
      <link>//paimon.apache.org/docs/0.4/engines/spark2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/engines/spark2/</guid>
      <description>Spark2 #  This documentation is a guide for using Paimon in Spark2.
Version #  Paimon supports Spark 2.4+. It is highly recommended to use Spark 2.4+ version with many improvements.
Preparing Paimon Jar File #  Download paimon-spark-2-0.4.0-incubating.jar. You can also manually build bundled jar from the source code.
To build from source code, clone the git repository.
Build bundled jar with the following command.
mvn clean install -DskipTests You can find the bundled jar in .</description>
    </item>
    
    <item>
      <title>Writing Tables</title>
      <link>//paimon.apache.org/docs/0.4/how-to/writing-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/how-to/writing-tables/</guid>
      <description>Writing Tables #  You can use the INSERT statement to inserts new rows into a table or overwrites the existing data in the table. The inserted rows can be specified by value expressions or result from a query.
Syntax #  INSERT { INTO | OVERWRITE } table_identifier [ part_spec ] [ column_list ] { value_expr | query }   part_spec
An optional parameter that specifies a comma-separated list of key and value pairs for partitions.</description>
    </item>
    
    <item>
      <title>Hive</title>
      <link>//paimon.apache.org/docs/0.4/engines/hive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/engines/hive/</guid>
      <description>Hive #  This documentation is a guide for using Paimon in Hive.
Version #  Paimon currently supports Hive 2.1, 2.1-cdh-6.3, 2.2, 2.3 and 3.1.
Execution Engine #  Paimon currently supports MR and Tez execution engine for Hive.
Installation #  Download the jar file with corresponding version.
    Jar     Hive 3.1 paimon-hive-connector-3.1-0.4.0-incubating.jar   Hive 2.3 paimon-hive-connector-2.3-0.4.0-incubating.jar   Hive 2.</description>
    </item>
    
    <item>
      <title>Manage Partition</title>
      <link>//paimon.apache.org/docs/0.4/maintenance/manage-partition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/maintenance/manage-partition/</guid>
      <description>Expiring Partitions #  You can set partition.expiration-time when creating a partitioned table. Paimon will periodically check the status of partitions and delete expired partitions according to time.
How to determine whether a partition has expired: compare the time extracted from the partition with the current time to see if survival time has exceeded the partition.expiration-time.
An example:
CREATE TABLE T (...) PARTITIONED BY (dt) WITH ( &amp;#39;partition.expiration-time&amp;#39; = &amp;#39;7 d&amp;#39;, &amp;#39;partition.</description>
    </item>
    
    <item>
      <title>Presto</title>
      <link>//paimon.apache.org/docs/0.4/engines/presto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/engines/presto/</guid>
      <description>This documentation is a guide for using Paimon in Presto.
Version #  Paimon currently supports Presto 0.236 and above.
Preparing Paimon Jar File #  Download the jar file with corresponding version.
   Version Jar     [0.236,0.268) paimon-presto-0.236-0.4.0-incubating.jar   [0.268,0.273) paimon-presto-0.268-0.4.0-incubating.jar   [0.273,0.279] paimon-presto-0.273-0.4.0-incubating.jar    You can also manually build bundled jar from the source code.
To build from source code, clone the git repository.</description>
    </item>
    
    <item>
      <title>Querying Tables</title>
      <link>//paimon.apache.org/docs/0.4/how-to/querying-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/how-to/querying-tables/</guid>
      <description>Querying Tables #  Just like all other tables, Paimon tables can be queried with SELECT statement.
Scan Mode #  By specifying the scan.mode table property, users can specify where and how Paimon sources should produce records.
  Scan Mode Batch Source Behavior Streaming Source Behavior     default The default scan mode. Determines actual scan mode according to other table properties. If &#34;scan.timestamp-millis&#34; is set the actual scan mode will be &#34;</description>
    </item>
    
    <item>
      <title>Lookup Joins</title>
      <link>//paimon.apache.org/docs/0.4/how-to/lookup-joins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/how-to/lookup-joins/</guid>
      <description>Lookup Joins #  Lookup Joins are a type of join in streaming queries. It is used to enrich a table with data that is queried from Paimon. The join requires one table to have a processing time attribute and the other table to be backed by a lookup source connector.
Paimon supports lookup joins on tables with primary keys in Flink. The following example illustrates this feature.
First, let&amp;rsquo;s create a Paimon table and update it in real-time.</description>
    </item>
    
    <item>
      <title>Primary Key Table</title>
      <link>//paimon.apache.org/docs/0.4/concepts/primary-key-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/concepts/primary-key-table/</guid>
      <description>Primary Key Table #  Changelog table is the default table type when creating a table. Users can insert, update or delete records in the table.
Primary keys are a set of columns that are unique for each record. Paimon imposes an ordering of data, which means the system will sort the primary key within each bucket. Using this feature, users can achieve high performance by adding filter conditions on the primary key.</description>
    </item>
    
    <item>
      <title>Trino</title>
      <link>//paimon.apache.org/docs/0.4/engines/trino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/engines/trino/</guid>
      <description>Trino #  Because Trino&amp;rsquo;s dependency is JDK 11, it is not possible to include the trino connector in paimon.
See paimon-trino.</description>
    </item>
    
    <item>
      <title>Append Only Table</title>
      <link>//paimon.apache.org/docs/0.4/concepts/append-only-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/concepts/append-only-table/</guid>
      <description>Append Only Table #  If a table does not have a primary key defined, it is an append-only table by default.
You can only insert a complete record into the table. No delete or update is supported and you cannot define primary keys. This type of table is suitable for use cases that do not require updates (such as log data synchronization).
Bucketing #  You can also define bucket number for Append-only table, see Bucket.</description>
    </item>
    
    <item>
      <title>CDC Ingestion</title>
      <link>//paimon.apache.org/docs/0.4/how-to/cdc-ingestion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/how-to/cdc-ingestion/</guid>
      <description>CDC Ingestion #  Paimon supports synchronizing changes from different databases using change data capture (CDC). This feature requires Flink and its CDC connectors.
MySQL #  Prepare CDC Bundled Jar #  flink-sql-connector-mysql-cdc-*.jar Synchronizing Tables #  By using MySqlSyncTableAction in a Flink DataStream job or directly through flink run, users can synchronize one or multiple tables from MySQL into one Paimon table.
To use this feature through flink run, run the following shell command.</description>
    </item>
    
    <item>
      <title>External Log Systems</title>
      <link>//paimon.apache.org/docs/0.4/concepts/external-log-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/concepts/external-log-systems/</guid>
      <description>External Log Systems #  Aside from underlying table files, changelog of Paimon can also be stored into or consumed from an external log system, such as Kafka. By specifying log.system table property, users can choose which external log system to use.
If an external log system is used, all records written into table files will also be written into the log system. Changes produced by the streaming queries will thus come from the log system instead of table files.</description>
    </item>
    
    <item>
      <title>Configurations</title>
      <link>//paimon.apache.org/docs/0.4/maintenance/configurations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/maintenance/configurations/</guid>
      <description>Configuration #  CoreOptions #  Core options for paimon.
  Key Default Type Description     auto-create false Boolean Whether to create underlying storage when reading and writing the table.   bucket 1 Integer Bucket number for file store.   bucket-key (none) String Specify the paimon distribution policy. Data is assigned to each bucket according to the hash value of bucket-key.
If you specify multiple fields, delimiter is &#39;,&#39;.</description>
    </item>
    
    <item>
      <title>Versions</title>
      <link>//paimon.apache.org/docs/0.4/versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//paimon.apache.org/docs/0.4/versions/</guid>
      <description>Versions #  An appendix of hosted documentation for all versions of Apache Paimon.
 master    stable    0.3    </description>
    </item>
    
  </channel>
</rss>
